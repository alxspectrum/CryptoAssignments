#!/bin/bash
# You are NOT allowed to change the files' names!
domainNames="domainNames.txt"
IPAddresses="IPAddresses.txt"
adblockRules="adblockRules"

generateTableHeader() {
    echo "# Generated by adblock.sh
*filter
:INPUT ACCEPT [570:181401]
:FORWARD DROP [0:0]
:OUTPUT ACCEPT [622:72162]
:DOCKER - [0:0]
:DOCKER-ISOLATION-STAGE-1 - [0:0]
:DOCKER-ISOLATION-STAGE-2 - [0:0]
:DOCKER-USER - [0:0]" >> "$adblockRules"
}

trap c_signal INT

function c_signal() {
    echo    
    # if [[ "$MODE" == "-domains" || "$MODE" == "-ips" ]]; then
    #     echo "COMMIT" >> "$adblockRules"
    #     echo $'\n' >> "$adblockRules"        
    # fi 
}


function validateIP() {
    ip=$1

    if [[ -z "$ip" ]]; then
        return 0
    fi

    regex=[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}
    if [[ $ip =~ ^$regex ]]; then 
        return 0
    fi

    return 1
}

function adBlock() {
    if [ "$EUID" -ne 0 ];then
        printf "Please run as root.\n"
        exit 1
    fi
    if [ "$1" = "-domains"  ]; then
        # Configure adblock rules based on the domain names of $domainNames file.
        # rm "$adblockRules"
        generateTableHeader
        cat "$domainNames" | while read dns; do
            ips="$(dig +short "$dns" | awk '{ print }')"

            for ip in $ips; do 
                # echo "$ip"
                validateIP "$ip"
                res=$?
                while [[ $res -ne 0 ]]; do
                    ip="$(dig +short "$ip" | awk '{ print; exit}')"
                    validateIP "$ip"
                    res=$?
                done

                if [[ -z "$ip" ]]; then
                    continue
                fi

                echo "$ip" >> "$IPAddresses"
                echo "-A INPUT -s ${ip} -j REJECT" >> "$adblockRules"
            done
        done

        echo "COMMIT" >> "$adblockRules"
        echo $'\n' >> "$adblockRules"

        true
            
    elif [ "$1" = "-ips"  ]; then
        # Configure adblock rules based on the IP addresses of $IPAddresses file.
        generateTableHeader
        cat "$IPAddresses" | while read ip; do

            validateIP "$ip"
            res=$?
            if [[ "$res" -ne 0 ]]; then
                continue
            fi

            echo "-A INPUT -s ${ip} -j REJECT" >> "$adblockRules"
        done

        echo "COMMIT" >> "$adblockRules"
        echo $'\n' >> "$adblockRules"

        true
        
    elif [ "$1" = "-save"  ]; then
        # Save rules to $adblockRules file.
        iptables-save -f "$adblockRules"

        true
        
    elif [ "$1" = "-load"  ]; then
        # Load rules from $adblockRules file.
        iptables-restore < "$adblockRules"
        true

        
    elif [ "$1" = "-reset"  ]; then
        # Reset rules to default settings (i.e. accept all).
        iptables -F
        
        iptables -P INPUT DROP
        iptables -P FORWARD DROP
        iptables -P OUTPUT DROP
        
        true

        
    elif [ "$1" = "-list"  ]; then
        # List current rules.
        iptables -n -L -v
        true
        
    elif [ "$1" = "-help"  ]; then
        printf "This script is responsible for creating a simple adblock mechanism. It rejects connections from specific domain names or IP addresses using iptables.\n\n"
        printf "Usage: $0  [OPTION]\n\n"
        printf "Options:\n\n"
        printf "  -domains\t  Configure adblock rules based on the domain names of '$domainNames' file.\n"
        printf "  -ips\t\t  Configure adblock rules based on the IP addresses of '$IPAddresses' file.\n"
        printf "  -save\t\t  Save rules to '$adblockRules' file.\n"
        printf "  -load\t\t  Load rules from '$adblockRules' file.\n"
        printf "  -list\t\t  List current rules.\n"
        printf "  -reset\t  Reset rules to default settings (i.e. accept all).\n"
        printf "  -help\t\t  Display this help and exit.\n"
        exit 0
    else
        printf "Wrong argument. Exiting...\n"
        exit 1
    fi
}

MODE=$1
adBlock $1
exit 0